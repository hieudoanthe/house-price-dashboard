import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.feature_selection import SelectKBest, mutual_info_regression
import warnings
warnings.filterwarnings('ignore')

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph√¢n t√≠ch gi√° nh√† - Dashboard",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ ch√≠nh
st.markdown('<h1 class="main-header">Dashboard Ph√¢n t√≠ch Gi√° Nh√†</h1>', unsafe_allow_html=True)

# H√†m √°p d·ª•ng style cho bi·ªÉu ƒë·ªì
def apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style):
    """√Åp d·ª•ng style v√† m√†u s·∫Øc cho bi·ªÉu ƒë·ªì"""
    
    # √Åp d·ª•ng template v√† legend
    fig.update_layout(
        template=chart_theme,
        showlegend=show_legend
    )
    
    # N·∫øu hi·ªÉn th·ªã legend, th√™m style cho legend
    if show_legend:
        fig.update_layout(
            legend=dict(
                x=0.02,
                y=0.98,
                bgcolor='rgba(255, 255, 255, 0.8)',
                bordercolor='gray',
                borderwidth=1
            )
        )
    
    # √Åp d·ª•ng style d·ª±a tr√™n chart_style
    if chart_style == "Minimal":
        fig.update_layout(
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(size=12, color='black'),
            title_font_size=16
        )
    elif chart_style == "Professional":
        fig.update_layout(
            plot_bgcolor='#f8f9fa',
            paper_bgcolor='white',
            font=dict(size=14, color='#2c3e50'),
            title_font_size=18
        )
    elif chart_style == "Colorful":
        fig.update_layout(
            plot_bgcolor='#e8f4fd',
            paper_bgcolor='white',
            font=dict(size=13, color='#34495e'),
            title_font_size=17
        )
    elif chart_style == "Dark Theme":
        fig.update_layout(
            plot_bgcolor='#2c3e50',
            paper_bgcolor='#34495e',
            font=dict(size=13, color='white'),
            title_font_color='white',
            title_font_size=17
        )
    elif chart_style == "Light Theme":
        fig.update_layout(
            plot_bgcolor='#ecf0f1',
            paper_bgcolor='white',
            font=dict(size=13, color='#2c3e50'),
            title_font_size=17
        )
    
    # √Åp d·ª•ng grid d·ª±a tr√™n show_grid
    if show_grid:
        fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
        fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
    else:
        fig.update_xaxes(showgrid=False)
        fig.update_yaxes(showgrid=False)
    
    # √Åp d·ª•ng color scheme cho c√°c bi·ªÉu ƒë·ªì c√≥ color
    if hasattr(fig, 'data') and len(fig.data) > 0:
        if color_scheme != "Default":
            color_maps = {
                "Viridis": "viridis",
                "Plasma": "plasma", 
                "Inferno": "inferno",
                "Magma": "magma",
                "Blues": "blues",
                "Reds": "reds",
                "Greens": "greens",
                "Purples": "purples",
                "Oranges": "oranges"
            }
            if color_scheme in color_maps:
                for trace in fig.data:
                    if hasattr(trace, 'marker') and hasattr(trace.marker, 'color'):
                        # √Åp d·ª•ng color scale cho scatter plots
                        if trace.type == 'scatter':
                            trace.marker.colorscale = color_maps[color_scheme]
    
    # ƒê·∫¢M B·∫¢O LEGEND ƒê∆Ø·ª¢C √ÅP D·ª§NG CU·ªêI C√ôNG
    fig.update_layout(showlegend=show_legend)
    
    return fig

# T·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    """T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu"""
    try:
        # T·∫£i d·ªØ li·ªáu
        df = pd.read_csv("house_price.csv")
        
        # X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu
        for column in df.columns:
            if df[column].dtype in ['int64', 'float64']:
                df[column] = df[column].fillna(df[column].median())
            else:
                mode_value = df[column].mode()
                if not mode_value.empty:
                    df[column] = df[column].fillna(mode_value[0])
        
        # Label encoding cho c√°c c·ªôt categorical
        le = LabelEncoder()
        for column in df.select_dtypes(include=['object']).columns:
            df[column] = le.fit_transform(df[column])
        
        # B·ªè c·ªôt Id
        df = df.drop('Id', axis=1)
        
        return df
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return None

# T·∫£i d·ªØ li·ªáu
df = load_data()

# Sidebar
st.sidebar.title("üéõÔ∏è ƒêi·ªÅu khi·ªÉn Dashboard")
st.sidebar.markdown("---")

if df is not None:
    # T√πy ch·ªçn hi·ªÉn th·ªã
    st.sidebar.markdown("### üìä T√πy ch·ªçn hi·ªÉn th·ªã")

    # B·ªô l·ªçc gi√°
    price_range = st.sidebar.slider(
        "üîç L·ªçc theo kho·∫£ng gi√° (USD)",
        min_value=int(df['SalePrice'].min()),
        max_value=int(df['SalePrice'].max()),
        value=(int(df['SalePrice'].min()), int(df['SalePrice'].max()))
    )

    # B·ªô l·ªçc ch·∫•t l∆∞·ª£ng
    quality_filter = st.sidebar.selectbox(
        "üèóÔ∏è L·ªçc theo ch·∫•t l∆∞·ª£ng",
        ["T·∫•t c·∫£", "R·∫•t Xu·∫•t S·∫Øc (9-10)", "Xu·∫•t S·∫Øc (8-9)", "T·ªët (7-8)", "Kh√° (6-7)", "Trung B√¨nh (5-6)", "D∆∞·ªõi Trung B√¨nh (1-5)"]
    )

    # B·ªô l·ªçc nƒÉm x√¢y d·ª±ng
    year_range = st.sidebar.slider(
        "üè† L·ªçc theo nƒÉm x√¢y d·ª±ng",
        min_value=int(df['YearBuilt'].min()),
        max_value=int(df['YearBuilt'].max()),
        value=(int(df['YearBuilt'].min()), int(df['YearBuilt'].max()))
    )

    # B·ªô l·ªçc di·ªán t√≠ch
    area_range = st.sidebar.slider(
        "üìê L·ªçc theo di·ªán t√≠ch sinh ho·∫°t (sqft)",
        min_value=500,
        max_value=5000,
        value=(500, 5000)
    )

    chart_theme = st.sidebar.selectbox(
        "üé® Ch·ªß ƒë·ªÅ bi·ªÉu ƒë·ªì",
        ["plotly", "plotly_white", "plotly_dark", "ggplot2", "seaborn", "simple_white", "presentation", "xgridoff", "ygridoff", "gridon"]
    )

    show_grid = st.sidebar.checkbox("üìä Hi·ªÉn th·ªã l∆∞·ªõi", value=True)
    show_legend = st.sidebar.checkbox("üìã Hi·ªÉn th·ªã ch√∫ th√≠ch", value=True)
    
    # T√πy ch·ªçn m√†u s·∫Øc
    color_scheme = st.sidebar.selectbox(
        "üé® B·∫£ng m√†u",
        ["Default", "Viridis", "Plasma", "Inferno", "Magma", "Blues", "Reds", "Greens", "Purples", "Oranges"]
    )
    
    # T√πy ch·ªçn style
    chart_style = st.sidebar.selectbox(
        "üé≠ Ki·ªÉu bi·ªÉu ƒë·ªì",
        ["Standard", "Minimal", "Professional", "Colorful", "Dark Theme", "Light Theme"]
    )

    # T√πy ch·ªçn m√¥ h√¨nh
    st.sidebar.markdown("### ü§ñ T√πy ch·ªçn m√¥ h√¨nh")

    selected_models = st.sidebar.multiselect(
        "üéØ Ch·ªçn m√¥ h√¨nh d·ª± ƒëo√°n",
        ["Linear Regression", "Random Forest", "Polynomial Regression"],
        default=["Linear Regression", "Random Forest"]
    )

    # T√πy ch·ªçn hi·ªÉn th·ªã d·ªØ li·ªáu
    st.sidebar.markdown("### üìã T√πy ch·ªçn d·ªØ li·ªáu")

    show_stats = st.sidebar.checkbox("üìä Hi·ªÉn th·ªã th·ªëng k√™", value=True)
    show_correlation = st.sidebar.checkbox("üîó Hi·ªÉn th·ªã t∆∞∆°ng quan", value=True)
    show_outliers = st.sidebar.checkbox("‚ö†Ô∏è Hi·ªÉn th·ªã outliers", value=False)

    # Th√¥ng tin d·ª± √°n
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è Th√¥ng tin d·ª± √°n")
    st.sidebar.markdown(f"""
    - **D·ªØ li·ªáu**: House Prices Dataset
    - **S·ªë m·∫´u**: {len(df):,} nh√†
    - **Thu·ªôc t√≠nh**: {len(df.columns)} bi·∫øn
    - **M·ª•c ti√™u**: D·ª± ƒëo√°n gi√° nh√†
    """)

else:
    # Gi√° tr·ªã m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ d·ªØ li·ªáu
    price_range = (0, 1000000)
    quality_filter = "T·∫•t c·∫£"
    year_range = (1900, 2010)
    area_range = (500, 5000)
    chart_theme = "plotly"
    show_grid = True
    color_scheme = "Default"
    chart_style = "Standard"
    selected_models = ["Linear Regression", "Random Forest"]
    show_stats = True
    show_correlation = True
    show_outliers = False

if df is not None:
    # √Åp d·ª•ng b·ªô l·ªçc t·ª´ sidebar
    filtered_df = df.copy()
    
    # L·ªçc theo kho·∫£ng gi√°
    filtered_df = filtered_df[
        (filtered_df['SalePrice'] >= price_range[0]) & 
        (filtered_df['SalePrice'] <= price_range[1])
    ]
    
    # L·ªçc theo ch·∫•t l∆∞·ª£ng
    if quality_filter != "T·∫•t c·∫£":
        if "R·∫•t Xu·∫•t S·∫Øc" in quality_filter:
            filtered_df = filtered_df[filtered_df['OverallQual'] >= 9]
        elif "Xu·∫•t S·∫Øc" in quality_filter:
            filtered_df = filtered_df[(filtered_df['OverallQual'] >= 8) & (filtered_df['OverallQual'] < 9)]
        elif "T·ªët" in quality_filter:
            filtered_df = filtered_df[(filtered_df['OverallQual'] >= 7) & (filtered_df['OverallQual'] < 8)]
        elif "Kh√°" in quality_filter:
            filtered_df = filtered_df[(filtered_df['OverallQual'] >= 6) & (filtered_df['OverallQual'] < 7)]
        elif "Trung B√¨nh" in quality_filter:
            filtered_df = filtered_df[(filtered_df['OverallQual'] >= 5) & (filtered_df['OverallQual'] < 6)]
        elif "D∆∞·ªõi Trung B√¨nh" in quality_filter:
            filtered_df = filtered_df[filtered_df['OverallQual'] < 5]
    
    # L·ªçc theo nƒÉm x√¢y d·ª±ng
    filtered_df = filtered_df[
        (filtered_df['YearBuilt'] >= year_range[0]) & 
        (filtered_df['YearBuilt'] <= year_range[1])
    ]
    
    # L·ªçc theo di·ªán t√≠ch sinh ho·∫°t
    filtered_df = filtered_df[
        (filtered_df['GrLivArea'] >= area_range[0]) & 
        (filtered_df['GrLivArea'] <= area_range[1])
    ]
    
    # Th√¥ng tin t·ªïng quan
    st.markdown("## üìä Th√¥ng tin t·ªïng quan")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng s·ªë m·∫´u", f"{len(filtered_df):,}")
    
    with col2:
        st.metric("S·ªë thu·ªôc t√≠nh", f"{len(filtered_df.columns)}")
    
    with col3:
        avg_price = filtered_df['SalePrice'].mean()
        st.metric("Gi√° trung b√¨nh", f"${avg_price:,.0f}")
    
    with col4:
        max_price = filtered_df['SalePrice'].max()
        st.metric("Gi√° cao nh·∫•t", f"${max_price:,.0f}")
    
    # Hi·ªÉn th·ªã th√¥ng tin b·ªô l·ªçc
    if len(filtered_df) != len(df):
        st.info(f"ƒêang hi·ªÉn th·ªã {len(filtered_df):,} m·∫´u t·ª´ {len(df):,} m·∫´u g·ªëc")
    
    st.markdown("---")
    
    # Tabs cho c√°c ph√¢n t√≠ch kh√°c nhau
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìà Ph√¢n t√≠ch T·ªïng quan", 
        "üèòÔ∏è Ph√¢n t√≠ch Khu v·ª±c", 
        "üèóÔ∏è Ph√¢n t√≠ch Ch·∫•t l∆∞·ª£ng", 
        "üìä T∆∞∆°ng quan", 
        "ü§ñ M√¥ h√¨nh D·ª± ƒëo√°n"
    ])
    
    with tab1:
        st.markdown("## üìà Ph√¢n t√≠ch T·ªïng quan")
        
        # Ph√¢n b·ªï gi√° nh√†
        col1, col2 = st.columns(2)
        
        with col1:
            # T·∫°o histogram b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
            fig = go.Figure()
            fig.add_trace(go.Histogram(
                x=filtered_df['SalePrice'],
                nbinsx=30,
                name='Ph√¢n b·ªï gi√° nh√†',
                marker_color='lightblue'
            ))
            fig.update_layout(
                title="Ph√¢n b·ªï gi√° nh√†",
                xaxis_title="Gi√° nh√† (USD)",
                yaxis_title="S·ªë l∆∞·ª£ng",
                height=400
            )
            fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Bi·∫øn ƒë·ªông gi√° theo nƒÉm - T·∫°o b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
            yearly_avg = filtered_df.groupby('YrSold')['SalePrice'].mean().reset_index()
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=yearly_avg['YrSold'],
                y=yearly_avg['SalePrice'],
                mode='lines+markers',
                name='Gi√° trung b√¨nh',
                line=dict(color='red', width=3),
                marker=dict(size=8)
            ))
            fig.update_layout(
                title="Bi·∫øn ƒë·ªông gi√° nh√† theo nƒÉm",
                xaxis_title="NƒÉm b√°n",
                yaxis_title="Gi√° trung b√¨nh (USD)",
                height=400
            )
            fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
            st.plotly_chart(fig, use_container_width=True)
        

        
        # Th·ªëng k√™ m√¥ t·∫£
        if show_stats:
            st.markdown("### üìã Th·ªëng k√™ m√¥ t·∫£")
            numeric_cols = filtered_df.select_dtypes(include=['number'])
            st.dataframe(numeric_cols.describe(), use_container_width=True)
        
        # Hi·ªÉn th·ªã outliers n·∫øu ƒë∆∞·ª£c ch·ªçn
        if show_outliers and len(filtered_df) > 0:
            st.markdown("### ‚ö†Ô∏è Ph√¢n t√≠ch Outliers")
            
            # T√≠nh Q1, Q3 v√† IQR cho gi√° nh√†
            Q1 = filtered_df['SalePrice'].quantile(0.25)
            Q3 = filtered_df['SalePrice'].quantile(0.75)
            IQR = Q3 - Q1
            
            # X√°c ƒë·ªãnh outliers
            outliers = filtered_df[
                (filtered_df['SalePrice'] < Q1 - 1.5 * IQR) | 
                (filtered_df['SalePrice'] > Q3 + 1.5 * IQR)
            ]
            
            if len(outliers) > 0:
                st.warning(f"Ph√°t hi·ªán {len(outliers)} outliers trong d·ªØ li·ªáu")
                st.dataframe(outliers[['SalePrice', 'OverallQual', 'GrLivArea', 'YearBuilt']].head(), use_container_width=True)
            else:
                st.success("Kh√¥ng ph√°t hi·ªán outliers trong d·ªØ li·ªáu ƒë√£ l·ªçc")
        elif not show_outliers:
            st.info("‚ö†Ô∏è T√πy ch·ªçn 'Hi·ªÉn th·ªã outliers' ƒë√£ ƒë∆∞·ª£c t·∫Øt. Vui l√≤ng b·∫≠t l·∫°i trong sidebar ƒë·ªÉ xem ph√¢n t√≠ch outliers.")
    
    with tab2:
        st.markdown("## üèòÔ∏è Ph√¢n t√≠ch Khu v·ª±c")
        
        # Mapping t√™n khu v·ª±c
        neighborhood_mapping = {
            0: "Bloomington Heights",
            1: "Bluestem", 
            2: "Briardale",
            3: "Brookside",
            4: "Clear Creek",
            5: "College Creek",
            6: "Crawford",
            7: "Edwards",
            8: "Gilbert",
            9: "Iowa DOT and Rail Road",
            10: "Meadow Village",
            11: "Mitchell",
            12: "North Ames",
            13: "Northridge",
            14: "Northpark Villa",
            15: "Northridge Heights",
            16: "Northwest Ames",
            17: "Old Town",
            18: "South & West of Iowa State University",
            19: "Sawyer",
            20: "Sawyer West",
            21: "Somerset",
            22: "Stone Brook",
            23: "Timberland",
            24: "Veenker"
        }
        
        # T√≠nh gi√° trung b√¨nh theo khu v·ª±c
        neighborhood_prices = filtered_df.groupby('Neighborhood')['SalePrice'].mean().reset_index()
        neighborhood_prices['Neighborhood_Name'] = neighborhood_prices['Neighborhood'].map(neighborhood_mapping)
        neighborhood_prices = neighborhood_prices.sort_values('SalePrice', ascending=False)
        
        # T·∫°o bar chart b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=neighborhood_prices['Neighborhood_Name'],
            y=neighborhood_prices['SalePrice'],
            name='Gi√° trung b√¨nh',
            marker_color='lightgreen'
        ))
        fig.update_layout(
            title="Gi√° nh√† trung b√¨nh theo khu v·ª±c",
            xaxis_title="Khu v·ª±c",
            yaxis_title="Gi√° trung b√¨nh (USD)",
            xaxis=dict(tickangle=45),
            height=500
        )
        fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
        st.plotly_chart(fig, use_container_width=True)
        
        # Top 5 khu v·ª±c c√≥ gi√° cao nh·∫•t
        st.markdown("### üèÜ Top 5 khu v·ª±c c√≥ gi√° cao nh·∫•t")
        top_5 = neighborhood_prices.head()
        color_scale = 'viridis' if color_scheme == "Default" else color_scheme.lower()
        
        # T·∫°o bar chart v·ªõi legend r√µ r√†ng
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=top_5['Neighborhood_Name'],
            y=top_5['SalePrice'],
            name='Top 5 khu v·ª±c',
            marker=dict(
                color=top_5['SalePrice'],
                colorscale=color_scale,
                showscale=True,
                colorbar=dict(title="Gi√° (USD)")
            )
        ))
        fig.update_layout(
            title="Top 5 khu v·ª±c c√≥ gi√° cao nh·∫•t",
            xaxis_title="Khu v·ª±c",
            yaxis_title="Gi√° (USD)",
            height=400
        )
        fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
        st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        st.markdown("## üèóÔ∏è Ph√¢n t√≠ch Ch·∫•t l∆∞·ª£ng")
        
        # Mapping ch·∫•t l∆∞·ª£ng
        qual_labels_vi = {
            10: 'R·∫•t Xu·∫•t S·∫Øc',
            9: 'Xu·∫•t S·∫Øc',
            8: 'R·∫•t T·ªët',
            7: 'T·ªët',
            6: 'Kh√°',
            5: 'Trung B√¨nh',
            4: 'D∆∞·ªõi Trung B√¨nh',
            3: 'Y·∫øu',
            2: 'K√©m',
            1: 'R·∫•t K√©m'
        }
        
        df_temp = filtered_df.copy()
        df_temp['Ch·∫•t_l∆∞·ª£ng'] = df_temp['OverallQual'].map(qual_labels_vi)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Boxplot gi√° theo ch·∫•t l∆∞·ª£ng - T·∫°o b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
            fig = go.Figure()
            
            # T·∫°o boxplot cho t·ª´ng ch·∫•t l∆∞·ª£ng
            for quality in df_temp['Ch·∫•t_l∆∞·ª£ng'].unique():
                data = df_temp[df_temp['Ch·∫•t_l∆∞·ª£ng'] == quality]['SalePrice']
                fig.add_trace(go.Box(
                    y=data,
                    name=quality,
                    boxpoints='outliers'
                ))
            
            fig.update_layout(
                title="Ph√¢n ph·ªëi gi√° theo ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ",
                xaxis_title="Ch·∫•t l∆∞·ª£ng",
                yaxis_title="Gi√° (USD)",
                height=400
            )
            fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Scatter plot di·ªán t√≠ch vs gi√° - T·∫°o b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
            color_scale = 'viridis' if color_scheme == "Default" else color_scheme.lower()
            
            # T·∫°o bi·ªÉu ƒë·ªì scatter v·ªõi legend
            fig = go.Figure()
            
            # Th√™m scatter plot v·ªõi colorbar
            fig.add_trace(go.Scatter(
                x=filtered_df['GrLivArea'],
                y=filtered_df['SalePrice'],
                mode='markers',
                marker=dict(
                    color=filtered_df['OverallQual'],
                    colorscale=color_scale,
                    showscale=True,
                    colorbar=dict(title="Ch·∫•t l∆∞·ª£ng")
                ),
                name='Nh√† theo ch·∫•t l∆∞·ª£ng',
                text=filtered_df['OverallQual'],
                hovertemplate='Di·ªán t√≠ch: %{x}<br>Gi√°: %{y}<br>Ch·∫•t l∆∞·ª£ng: %{text}<extra></extra>'
            ))
            
            fig.update_layout(
                title="M·ªëi quan h·ªá di·ªán t√≠ch - gi√° theo ch·∫•t l∆∞·ª£ng",
                xaxis_title="Di·ªán t√≠ch sinh ho·∫°t (sqft)",
                yaxis_title="Gi√° (USD)",
                height=400
            )
            fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
            st.plotly_chart(fig, use_container_width=True)
        
        # Th·ªëng k√™ theo ch·∫•t l∆∞·ª£ng
        st.markdown("### üìä Th·ªëng k√™ theo ch·∫•t l∆∞·ª£ng")
        quality_stats = df_temp.groupby('Ch·∫•t_l∆∞·ª£ng')['SalePrice'].agg(['count', 'mean', 'std']).round(2)
        quality_stats.columns = ['S·ªë l∆∞·ª£ng', 'Gi√° trung b√¨nh', 'ƒê·ªô l·ªách chu·∫©n']
        st.dataframe(quality_stats, use_container_width=True)
    
    with tab4:
        st.markdown("## üìä Ph√¢n t√≠ch T∆∞∆°ng quan")
        
        if show_correlation:
            # Ch·ªçn c√°c c·ªôt quan tr·ªçng
            important_cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'TotalBsmtSF', 
                             '1stFlrSF', '2ndFlrSF', 'LotArea', 'YearBuilt', 'GarageArea']
            
            correlation_matrix = filtered_df[important_cols].corr()
            
            # Heatmap t∆∞∆°ng quan
            color_scale = 'RdBu' if color_scheme == "Default" else color_scheme.lower()
            fig = px.imshow(
                correlation_matrix,
                text_auto=True,
                aspect="auto",
                title="Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c y·∫øu t·ªë ch√≠nh",
                color_continuous_scale=color_scale
            )
            fig.update_layout(height=500)
            fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
            st.plotly_chart(fig, use_container_width=True)
            
            # T∆∞∆°ng quan v·ªõi gi√° nh√†
            corr_with_price = correlation_matrix['SalePrice'].sort_values(ascending=False)
            
            # T·∫°o bar chart b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=corr_with_price.index,
                y=corr_with_price.values,
                name='H·ªá s·ªë t∆∞∆°ng quan',
                marker_color='orange'
            ))
            fig.update_layout(
                title="T∆∞∆°ng quan v·ªõi gi√° nh√†",
                xaxis_title="Y·∫øu t·ªë",
                yaxis_title="H·ªá s·ªë t∆∞∆°ng quan",
                height=400
            )
            fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("üîó T√πy ch·ªçn 'Hi·ªÉn th·ªã t∆∞∆°ng quan' ƒë√£ ƒë∆∞·ª£c t·∫Øt. Vui l√≤ng b·∫≠t l·∫°i trong sidebar ƒë·ªÉ xem ph√¢n t√≠ch t∆∞∆°ng quan.")
    
    with tab5:
        st.markdown("## ü§ñ M√¥ h√¨nh D·ª± ƒëo√°n Gi√° Nh√†")
        
        # Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë·ªß ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh kh√¥ng
        if len(filtered_df) < 10:
            st.warning("‚ö†Ô∏è D·ªØ li·ªáu sau khi l·ªçc qu√° √≠t ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh. Vui l√≤ng m·ªü r·ªông b·ªô l·ªçc.")
            st.info(f"Hi·ªán t·∫°i c√≥ {len(filtered_df)} m·∫´u, c·∫ßn √≠t nh·∫•t 10 m·∫´u ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.")
        else:
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho m√¥ h√¨nh
            X = filtered_df.drop('SalePrice', axis=1)
            y = filtered_df['SalePrice']
            
            # Feature selection
            k_features = min(25, len(X.columns), len(filtered_df) - 1)
            selector = SelectKBest(score_func=mutual_info_regression, k=k_features)
            X_selected = selector.fit_transform(X, y)
            selected_features = X.columns[selector.get_support()]
            
            # Chia d·ªØ li·ªáu
            X_train, X_test, y_train, y_test = train_test_split(
                X_selected, y, test_size=0.2, random_state=42
            )
        
            # Hu·∫•n luy·ªán c√°c m√¥ h√¨nh
            models = {
                'Linear Regression': LinearRegression(),
                'Random Forest': RandomForestRegressor(random_state=42)
            }
            
            results = {}
            
            for name, model in models.items():
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                
                mae = mean_absolute_error(y_test, y_pred)
                mse = mean_squared_error(y_test, y_pred)
                rmse = np.sqrt(mse)
                r2 = r2_score(y_test, y_pred)
                
                results[name] = {
                    'MAE': mae,
                    'MSE': mse,
                    'RMSE': rmse,
                    'R¬≤': r2,
                    'predictions': y_pred
                }
        
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üìà K·∫øt qu·∫£ m√¥ h√¨nh")
                
                for name, metrics in results.items():
                    st.markdown(f"**{name}**")
                    st.metric("MAE", f"${metrics['MAE']:,.0f}")
                    st.metric("RMSE", f"${metrics['RMSE']:,.0f}")
                    st.metric("R¬≤", f"{metrics['R¬≤']:.4f}")
                    st.markdown("---")
            
            with col2:
                st.markdown("### üîç So s√°nh d·ª± ƒëo√°n vs th·ª±c t·∫ø")
                
                # Scatter plot cho Random Forest (m√¥ h√¨nh t·ªët nh·∫•t) - T·∫°o b·∫±ng go.Figure ƒë·ªÉ c√≥ legend r√µ r√†ng
                fig = go.Figure()
                
                # Th√™m scatter plot
                fig.add_trace(go.Scatter(
                    x=y_test,
                    y=results['Random Forest']['predictions'],
                    mode='markers',
                    name='D·ª± ƒëo√°n vs Th·ª±c t·∫ø',
                    marker=dict(
                        color='blue',
                        size=8,
                        opacity=0.7
                    )
                ))
                
                # Th√™m ƒë∆∞·ªùng ch√©o
                min_val = min(y_test.min(), results['Random Forest']['predictions'].min())
                max_val = max(y_test.max(), results['Random Forest']['predictions'].max())
                fig.add_trace(go.Scatter(
                    x=[min_val, max_val],
                    y=[min_val, max_val],
                    mode='lines',
                    name='ƒê∆∞·ªùng ch√©o (L√Ω t∆∞·ªüng)',
                    line=dict(color='red', dash='dash', width=2)
                ))
                
                fig.update_layout(
                    title="D·ª± ƒëo√°n vs Th·ª±c t·∫ø (Random Forest)",
                    xaxis_title="Gi√° th·ª±c t·∫ø",
                    yaxis_title="Gi√° d·ª± ƒëo√°n",
                    height=400
                )
                fig = apply_chart_style(fig, chart_theme, show_grid, show_legend, color_scheme, chart_style)
                st.plotly_chart(fig, use_container_width=True)
        
            # D·ª± ƒëo√°n gi√° nh√† m·ªõi
            st.markdown("### üéØ D·ª± ƒëo√°n gi√° nh√† m·ªõi")
            
            col1, col2 = st.columns(2)
            
            with col1:
                overall_qual = st.slider("Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ", 1, 10, 5)
                gr_liv_area = st.slider("Di·ªán t√≠ch sinh ho·∫°t (sqft)", 500, 4000, 1500)
                total_bsmt_sf = st.slider("Di·ªán t√≠ch t·∫ßng h·∫ßm (sqft)", 0, 3000, 1000)
                year_built = st.slider("NƒÉm x√¢y d·ª±ng", 1900, 2010, 1970)
            
            with col2:
                garage_area = st.slider("Di·ªán t√≠ch gara (sqft)", 0, 1000, 400)
                lot_area = st.slider("Di·ªán t√≠ch l√¥ ƒë·∫•t (sqft)", 1000, 50000, 10000)
                full_bath = st.slider("S·ªë ph√≤ng t·∫Øm ƒë·∫ßy ƒë·ªß", 0, 4, 2)
                garage_cars = st.slider("S·ª©c ch·ª©a xe trong gara", 0, 4, 2)
            
            if st.button("üîÆ D·ª± ƒëo√°n gi√°"):
                # T·∫°o d·ªØ li·ªáu m·∫´u
                sample_data = np.zeros((1, X_selected.shape[1]))
                
                # C·∫≠p nh·∫≠t c√°c gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn
                feature_names = selected_features.tolist()
                
                # T√¨m index c·ªßa c√°c features quan tr·ªçng
                if 'OverallQual' in feature_names:
                    idx = feature_names.index('OverallQual')
                    sample_data[0, idx] = overall_qual
                
                if 'GrLivArea' in feature_names:
                    idx = feature_names.index('GrLivArea')
                    sample_data[0, idx] = gr_liv_area
                
                if 'TotalBsmtSF' in feature_names:
                    idx = feature_names.index('TotalBsmtSF')
                    sample_data[0, idx] = total_bsmt_sf
                
                if 'YearBuilt' in feature_names:
                    idx = feature_names.index('YearBuilt')
                    sample_data[0, idx] = year_built
                
                if 'GarageArea' in feature_names:
                    idx = feature_names.index('GarageArea')
                    sample_data[0, idx] = garage_area
                
                if 'LotArea' in feature_names:
                    idx = feature_names.index('LotArea')
                    sample_data[0, idx] = lot_area
                
                if 'FullBath' in feature_names:
                    idx = feature_names.index('FullBath')
                    sample_data[0, idx] = full_bath
                
                if 'GarageCars' in feature_names:
                    idx = feature_names.index('GarageCars')
                    sample_data[0, idx] = garage_cars
                
                # D·ª± ƒëo√°n
                rf_prediction = models['Random Forest'].predict(sample_data)[0]
                lr_prediction = models['Linear Regression'].predict(sample_data)[0]
                
                st.success(f"üéØ **D·ª± ƒëo√°n gi√° nh√†:**")
                st.metric("Random Forest", f"${rf_prediction:,.0f}")
                st.metric("Linear Regression", f"${lr_prediction:,.0f}")

else:
    st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra file house_price.csv")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>ƒêo√†n Th·∫ø Hi·∫øu - Nguy·ªÖn Quang H·ªá - Ng√¥ M·∫°nh Minh Huy | Ph√¢n t√≠ch Gi√° Nh√†</p>
    <p>D·ª±a tr√™n d·ªØ li·ªáu House Prices - Advanced Regression Techniques</p>
</div>
""", unsafe_allow_html=True)
